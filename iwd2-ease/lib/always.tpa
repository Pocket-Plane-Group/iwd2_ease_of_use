ACTION_IF ("%LANGUAGE%" STRING_COMPARE_CASE "english" = 0) BEGIN OUTER_SET subs = 1 END ELSE BEGIN OUTER_SET subs = 0 END

/////                                                  \\\\\
///// alter_header_iwd2                                \\\\\
/////                                                  \\\\\

// adapted from bg2 fixpack's ALTER_HEADER

// got tired of crappy ALTER_ITEM_HEADER and ALTER_SPELL_HEADER
DEFINE_PATCH_FUNCTION ALTER_HEADER_IWD2

  // defines what we're going to check
  INT_VAR multi_match         = 999
          verbose             = 0
          silent              = 0
          header              = "-1"

  // variables for finding the effect to match
          match_type        = "-1"
          match_location    = "-1"
          match_target      = "-1"
          match_range       = "-1"
          match_speed       = "-1"
          match_projectile  = "-1"
          // spell headers only
          match_level       = "-1"
          match_target_num  = "-1"
          // item headers only
          match_identify       = "-1"
          match_launcher       = "-1"
          match_to_hit         = "-1"
          match_dicesize       = "-1"
          match_primary        = "-1"
          match_dicenumber     = "-1"
          match_damage         = "-1"
          match_damage_type    = "-1"
          match_charges        = "-1"
          match_drained        = "-1"
          match_overhand       = "-1"
          match_backhand       = "-1"
          match_thrust         = "-1"
          match_arrow          = "-1"
          match_bolt           = "-1"
          match_bullet         = "-1"
          // flags at 0x26 (still item only)
          match_flag_strength      = "-1" // add strength bonus, bit0
          match_flag_break         = "-1" // breakable, bit1
          match_flag_hostile       = "-1" // hostile, bit10
          match_flag_recharge      = "-1" // recharge after resting, bit11
          match_flag_bypass        = "-1" // bypass armor, bit16
          match_flag_keenedge      = "-1" // keen edge, bit17

  // variables for the new effect
          type        = "-1"
          location    = "-1"
          target      = "-1"
          range       = "-1"
          speed       = "-1"
          projectile  = "-1"
          // spell headers only
          level       = "-1"
          target_num  = "-1"
          // item headers only
          identify       = "-1"
          launcher       = "-1"
          to_hit         = "-1"
          dicesize       = "-1"
          primary        = "-1"
          dicenumber     = "-1"
          damage         = "-1"
          damage_type    = "-1"
          charges        = "-1"
          drained        = "-1"
          overhand       = "-1"
          backhand       = "-1"
          thrust         = "-1"
          arrow          = "-1"
          bolt           = "-1"
          bullet         = "-1"
          // flags at 0x26
          flag_strength      = "-1" // add strength bonus, bit0
          flag_break         = "-1" // breakable, bit1
          flag_hostile       = "-1" // hostile, bit10
          flag_recharge      = "-1" // recharge after resting, bit11
          flag_bypass        = "-1" // bypass armor, bit16
          flag_keenedge      = "-1" // keen edge, bit17

  // same for match and new STR_VAR
  STR_VAR match_icon      = "SAME"
          icon            = "SAME"
BEGIN

  READ_ASCII 0x00 sig (3)
  SET abil_length = 0
  SET proceed = 0
  SET alter = 0
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "ITM" = 0) BEGIN
    SET abil_length = 0x38
  END ELSE
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "SPL" = 0) BEGIN
    SET abil_length = 0x28
  END
  PATCH_IF abil_length = 0 BEGIN
    PATCH_WARN ~WARNING: file type not recognized on %SOURCE_FILE% for ALTER_HEADER_IWD2 macro.~
  END ELSE BEGIN
    SET pro_off = abil_length = 0x38 ? 0x2a : 0x26
    READ_LONG   0x64 abil_off
    READ_SHORT  0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      PATCH_IF ((header < 0) OR (header = index)) BEGIN
        SET base = abil_off + (index * abil_length)
        READ_BYTE  (base + 0x00) o_type
        READ_SHORT (base + 0x02) o_location
        READ_ASCII (base + 0x04) o_icon (8) NULL
        READ_SHORT (base + 0x0e) o_range
        READ_SHORT (base + 0x12) o_speed
        READ_SHORT (base + pro_off) o_projectile
        PATCH_IF abil_length = 0x38 BEGIN
          // item headers only
          READ_BYTE  (base + 0x01) o_identify
          READ_SHORT (base + 0x0c) o_target
          READ_SHORT (base + 0x10) o_launcher
          READ_SHORT (base + 0x14) o_to_hit
          READ_BYTE  (base + 0x16) o_dicesize
          READ_BYTE  (base + 0x17) o_primary
          READ_SHORT (base + 0x18) o_dicenumber
          READ_SHORT (base + 0x1a) o_damage
          READ_SHORT (base + 0x1c) o_damage_type
          READ_SHORT (base + 0x22) o_charges
          READ_SHORT (base + 0x24) o_drained
          READ_LONG  (base + 0x26) o_flags
          READ_SHORT (base + 0x2c) o_overhand
          READ_SHORT (base + 0x2e) o_backhand
          READ_SHORT (base + 0x30) o_thrust
          READ_SHORT (base + 0x32) o_arrow
          READ_SHORT (base + 0x34) o_bolt
          READ_SHORT (base + 0x36) o_bullet
        END ELSE BEGIN
          READ_BYTE  (base + 0x0c) o_target
          READ_BYTE  (base + 0x0d) o_target_num
          READ_SHORT (base + 0x10) o_level
        END
        // now check our header vs. the match variables
        PATCH_IF ((multi_match != 0) AND
                  ((match_type       = o_type)       OR (match_type < 0))       AND
                  ((match_type       = o_type)       OR (match_type < 0))       AND
                  ((match_location   = o_location)   OR (match_location < 0))   AND
                  ((match_target     = o_target)     OR (match_target < 0))     AND
                  ((match_range      = o_range)      OR (match_range < 0))      AND
                  ((match_speed      = o_speed)      OR (match_speed < 0))      AND
                  ((match_projectile = o_projectile) OR (match_projectile < 0)) AND
                  (("%match_icon%" STRING_COMPARE_CASE "%o_icon%" = 0) OR ("%match_icon%" STRING_COMPARE_CASE "SAME" = 0))) BEGIN
          PATCH_IF (abil_length = 0x38) BEGIN  // item-specific checks
            PATCH_IF (((match_identify       = o_identify)       OR (match_identify < 0))       AND
                      ((match_launcher       = o_launcher)       OR (match_launcher < 0))       AND
                      ((match_to_hit         = o_to_hit)         OR (match_to_hit < 0))         AND
                      ((match_dicesize       = o_dicesize)       OR (match_dicesize < 0))       AND
                      ((match_primary        = o_primary)        OR (match_primary < 0))        AND
                      ((match_dicenumber     = o_dicenumber)     OR (match_dicenumber < 0))     AND
                      ((match_damage         = o_damage)         OR (match_damage < 0))         AND
                      ((match_damage_type    = o_damage_type)    OR (match_damage_type < 0))    AND
                      ((match_charges        = o_charges)        OR (match_charges < 0))        AND
                      ((match_drained        = o_drained)        OR (match_drained < 0))        AND
                      ((match_overhand       = o_overhand)       OR (match_overhand < 0))       AND
                      ((match_backhand       = o_backhand)       OR (match_backhand < 0))       AND
                      ((match_thrust         = o_thrust)         OR (match_thrust < 0))         AND
                      ((match_arrow          = o_arrow)          OR (match_arrow < 0))          AND
                      ((match_bolt           = o_bolt)           OR (match_bolt < 0))           AND
                      ((match_bullet         = o_bullet)         OR (match_bullet < 0))         AND
                      ((match_flag_strength < 0) OR
                       (match_flag_strength = (flags & BIT0)) OR // not set
                       (match_flag_strength > 0 AND (flags & BIT0) = BIT0)) AND
                      ((match_flag_break < 0) OR
                       (match_flag_break = (flags & BIT1)) OR // not set
                       (match_flag_break > 0 AND (flags & BIT1) = BIT1)) AND
                      ((match_flag_hostile < 0) OR
                       (match_flag_hostile = (flags & BIT10)) OR // not set
                       (match_flag_hostile > 0 AND (flags & BIT10) = BIT10)) AND
                      ((match_flag_recharge < 0) OR
                       (match_flag_recharge = (flags & BIT11)) OR // not set
                       (match_flag_recharge > 0 AND (flags & BIT11) = BIT11)) AND
                      ((match_flag_bypass < 0) OR
                       (match_flag_bypass = (flags & BIT16)) OR // not set
                       (match_flag_bypass > 0 AND (flags & BIT16) = BIT16)) AND
                      ((match_flag_keenedge < 0) OR
                       (match_flag_keenedge = (flags & BIT17)) OR // not set
                       (match_flag_keenedge > 0 AND (flags & BIT17) = BIT17))) BEGIN
              SET proceed = 1
            END
          END ELSE BEGIN // spell-specific checks
            PATCH_IF ((match_level      = o_level)      OR (match_level < 0) AND
                      (match_target_num = o_target_num) OR (match_target_num < 0)) BEGIN
              SET proceed = 1
            END
          END
          PATCH_IF proceed BEGIN
            SET alter += 1
            SET multi_match -= 1
            PATCH_IF (type >= 0)       BEGIN WRITE_BYTE  (base + 0x00) type END
            PATCH_IF (location >= 0)   BEGIN WRITE_SHORT (base + 0x02) location END
            PATCH_IF (range >= 0)      BEGIN WRITE_SHORT (base + 0x0e) range END
            PATCH_IF (speed >= 0)      BEGIN WRITE_SHORT (base + 0x12) speed END
            PATCH_IF (projectile >= 0) BEGIN WRITE_SHORT (base + pro_off) projectile END
            PATCH_IF ("%icon%" STRING_COMPARE_CASE "SAME") BEGIN WRITE_ASCIIE (base + 0x04) ~%icon%~ #8 END
            PATCH_IF abil_length = 0x38 BEGIN // item headers
              PATCH_IF (identify >= 0)       BEGIN WRITE_BYTE  (base + 0x01) identify       END
              PATCH_IF (target >= 0)         BEGIN WRITE_SHORT (base + 0x0c) target         END
              PATCH_IF (launcher >= 0)       BEGIN WRITE_SHORT (base + 0x10) launcher       END
              PATCH_IF (to_hit >= 0)         BEGIN WRITE_SHORT (base + 0x14) to_hit         END
              PATCH_IF (dicesize >= 0)       BEGIN WRITE_BYTE  (base + 0x16) dicesize       END
              PATCH_IF (primary >= 0)        BEGIN WRITE_BYTE  (base + 0x17) primary        END
              PATCH_IF (dicenumber >= 0)     BEGIN WRITE_SHORT (base + 0x18) dicenumber     END
              PATCH_IF (damage >= 0)         BEGIN WRITE_SHORT (base + 0x1a) damage         END
              PATCH_IF (damage_type >= 0)    BEGIN WRITE_SHORT (base + 0x1c) damage_type    END
              PATCH_IF (charges >= 0)        BEGIN WRITE_SHORT (base + 0x22) charges        END
              PATCH_IF (drained >= 0)        BEGIN WRITE_SHORT (base + 0x24) drained        END
              PATCH_IF (overhand >= 0)       BEGIN WRITE_SHORT (base + 0x2c) overhand       END
              PATCH_IF (backhand >= 0)       BEGIN WRITE_SHORT (base + 0x2e) backhand       END
              PATCH_IF (thrust >= 0)         BEGIN WRITE_SHORT (base + 0x30) thrust         END
              PATCH_IF (arrow >= 0)          BEGIN WRITE_SHORT (base + 0x32) arrow          END
              PATCH_IF (bolt >= 0)           BEGIN WRITE_SHORT (base + 0x34) bolt           END
              PATCH_IF (bullet >= 0)         BEGIN WRITE_SHORT (base + 0x36) bullet         END
  
              PATCH_IF (flag_strength = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT0)  END
              PATCH_IF (flag_strength > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT0)  END
              PATCH_IF (flag_break = 0)       BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT1)  END
              PATCH_IF (flag_break > 0)       BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT1)  END
              PATCH_IF (flag_hostile = 0)     BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT10) END
              PATCH_IF (flag_hostile > 0)     BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT10) END
              PATCH_IF (flag_recharge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT11) END
              PATCH_IF (flag_recharge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT11) END
              PATCH_IF (flag_bypass = 0)      BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT16) END
              PATCH_IF (flag_bypass > 0)      BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT16) END
              PATCH_IF (flag_keenedge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT17) END
              PATCH_IF (flag_keenedge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT17) END
            END ELSE BEGIN // spell headers
              PATCH_IF (target >= 0)     BEGIN WRITE_BYTE  (base + 0x0c) target END
              PATCH_IF (target_num >= 0) BEGIN WRITE_BYTE  (base + 0x0d) target_num END
              PATCH_IF (level >= 0)      BEGIN WRITE_SHORT (base + 0x10) level END
            END
          END // proceed check
        END // mutual fields check
      END // for loop
    END // header check
  END // abil_length check

  PATCH_IF (alter = 0 && !silent) BEGIN
    PATCH_WARN "WARNING: no effects altered on %SOURCE_FILE% via ALTER_HEADER"
  END

  PATCH_IF (verbose && !silent) BEGIN
    READ_LONG 0x0c strref
    PATCH_IF ((strref > 0) AND (strref < 200000)) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_PRINT "              ~%SOURCE_FILE%~   ~override~ // %name%, %alter% effect(s) altered"
  END

END

/////                                                  \\\\\
///// ALTER_AREA/CREATURE_ITEM                         \\\\\
/////                                                  \\\\\

// adapted from bg2 fixpack's macros

// alter_creature and alter_area just feed into a common macro that does the work

DEFINE_PATCH_FUNCTION ALTER_AREA_ITEM_IWD2

  // defines what we're going to check
  INT_VAR expiry           = "-1"
          charge1          = "-1"
          charge2          = "-1"
          charge3          = "-1"
          flags            = "-1"
          flag_identified  = "-1"
          flag_unstealable = "-1"
          flag_stolen      = "-1"
          flag_undroppable = "-1"
  STR_VAR item       = "same"
          match_item = "same"

BEGIN

  READ_SHORT 0x86 item_num ELSE 0
  READ_LONG  0x88 item_off ELSE 0
  LPF ALTER_AREA-CREATURE_ITEM_IWD2 INT_VAR expiry charge1 charge2 charge3 flags flag_identified flag_unstealable flag_stolen flag_undroppable item_num item_off
                                    STR_VAR item match_item END

END

DEFINE_PATCH_FUNCTION ALTER_CREATURE_ITEM_IWD2

  // defines what we're going to check
  INT_VAR expiry           = "-1"
          charge1          = "-1"
          charge2          = "-1"
          charge3          = "-1"
          flags            = "-1"
          flag_identified  = "-1"
          flag_unstealable = "-1"
          flag_stolen      = "-1"
          flag_undroppable = "-1"
  STR_VAR item       = "same"
          match_item = "same"

BEGIN

  READ_LONG  0x616 item_off ELSE 0
  READ_LONG  0x61a item_num ELSE 0
  LPF ALTER_AREA-CREATURE_ITEM_IWD2 INT_VAR expiry charge1 charge2 charge3 flags flag_identified flag_unstealable flag_stolen flag_undroppable item_num item_off
                                    STR_VAR item match_item END

END

DEFINE_PATCH_FUNCTION ALTER_AREA-CREATURE_ITEM_IWD2

  // defines what we're going to check
  INT_VAR expiry           = "-1"
          charge1          = "-1"
          charge2          = "-1"
          charge3          = "-1"
          flags            = "-1"
          flag_identified  = "-1"
          flag_unstealable = "-1"
          flag_stolen      = "-1"
          flag_undroppable = "-1"
          item_num         = 0
          item_off         = 0
  STR_VAR item       = "same"
          match_item = "same"

BEGIN

  FOR (index = 0 ; index < item_num ; ++index) BEGIN
    SET base = (item_off + (index * 0x14))
    READ_ASCII base o_item
    PATCH_IF (("%o_item%" STRING_COMPARE_CASE "%match_item%" = 0) OR
              ("all"      STRING_COMPARE_CASE "%match_item%" = 0)) BEGIN
      PATCH_IF (expiry >= 0)  BEGIN WRITE_SHORT (base + 0x08) expiry END
      PATCH_IF (charge1 >= 0) BEGIN WRITE_SHORT (base + 0x0a) charge1 END
      PATCH_IF (charge2 >= 0) BEGIN WRITE_SHORT (base + 0x0c) charge2 END
      PATCH_IF (charge3 >= 0) BEGIN WRITE_SHORT (base + 0x0e) charge3 END
      PATCH_IF (flags >= 0)   BEGIN
        WRITE_LONG (base + 0x10) flags
      END ELSE BEGIN // only check individual flags if overall value not given
        PATCH_IF (flag_identified = 0)  BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT0) END
        PATCH_IF (flag_identified = 1)  BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT0) END
        PATCH_IF (flag_unstealable = 0) BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT1) END
        PATCH_IF (flag_unstealable = 1) BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT1) END
        PATCH_IF (flag_stolen = 0)      BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT2) END
        PATCH_IF (flag_stolen = 1)      BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT2) END
        PATCH_IF (flag_undroppable = 0) BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT3) END
        PATCH_IF (flag_undroppable = 1) BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT3) END
      END
      PATCH_IF ("%item%" STRING_COMPARE_CASE "same") BEGIN
        WRITE_ASCIIE base ~%item%~ #8
      END
    END
  END

END


  
/////                                                  \\\\\
///// items casting spells                             \\\\\
/////                                                  \\\\\

// adapted from iwd fixpack

DEFINE_ACTION_FUNCTION cd_items_casting_spells
  INT_VAR cast_at_level = 1
          duration      = "-1"
          item_header   = "-1"
          probability   = 0 
          set_icon      = 0
  STR_VAR item  = null
          spell = null
  BEGIN
  
  ACTION_IF FILE_EXISTS_IN_GAME ~%spell%.spl~ AND
            FILE_EXISTS_IN_GAME ~%item%.itm~ AND
            item_header >= 0 BEGIN
            
    COPY_EXISTING ~%spell%.spl~ ~override~
      READ_SHORT 0x68 abil_num
      READ_LONG  0x64 abil_off
      READ_LONG  0x6a fx_off
      PATCH_IF ((abil_num = 1) OR (cast_at_level = 1)) BEGIN
        SET base_off = abil_off
      END ELSE BEGIN  
        FOR (index = 1 ; index < abil_num ; ++index) BEGIN // skip first ability
          READ_SHORT (abil_off + 0x10 + (index * 0x28)) min_lev
          PATCH_IF min_lev = cast_at_level BEGIN
            SET base_off = (abil_off + 0x00 + (index * 0x28))
            SET index = abil_num // kill loop
          END  
          PATCH_IF min_lev < cast_at_level BEGIN
            SET base_off = (abil_off + 0x00 + ((index - 1) * 0x28))
            SET index = abil_num // kill loop
          END  
        END
      END
      READ_ASCII (base_off + 0x04) icon
      READ_SHORT (base_off + 0x1e) transfer_fx_num
      READ_SHORT (base_off + 0x20) abil_fx_idx 
      READ_ASCII (fx_off + (abil_fx_idx * 0x30)) transfer_effects (0x30 * transfer_fx_num) // read all effects in a massive block
      BUT_ONLY
    
    COPY_EXISTING ~%item%.itm~ ~override~    
      READ_SHORT 0x68 abil_num
      READ_LONG  0x64 abil_off
      READ_LONG  0x6a fx_off
      SET fx_delta = 0
      FOR (index = 0 ; index < abil_num + 1 ; ++index) BEGIN
        PATCH_IF index = 0 BEGIN // global effect loop
          SET abil_fx_idx_off = 0x6e
          SET abil_fx_num_off = 0x70
        END ELSE BEGIN           // ability loops
          SET abil_fx_idx_off = (abil_off + 0x20 + ((index - 1) * 0x38))
          SET abil_fx_num_off = (abil_off + 0x1e + ((index - 1) * 0x38))
        END 
        WRITE_SHORT  abil_fx_idx_off (THIS + fx_delta)         // update with previously inserted effects
        PATCH_IF index = item_header BEGIN                     // if we're in the correct header
          PATCH_IF set_icon AND item_header BEGIN
            WRITE_ASCIIE (abil_fx_idx_off - 0x1c) ~%icon%~ #8  // update icon, if indicated
          END  
          SET fx_delta += transfer_fx_num                      // update delta
          READ_SHORT abil_fx_idx_off abil_fx_idx               // read updated index
          WRITE_SHORT abil_fx_num_off (THIS + transfer_fx_num) // update number of effects
          SET base_fx_add = (fx_off + 0x00 + (abil_fx_idx * 0x30))
          INSERT_BYTES base_fx_add (0x30 * transfer_fx_num)            // make space for...
          WRITE_ASCIIE base_fx_add ~%transfer_effects%~                // transferred effects
          FOR (index2 = 0 ; index2 < transfer_fx_num ; ++index2) BEGIN // loop through newly-inserted effects
            READ_ASCII (base_fx_add + 0x14 + (0x30 * index2)) resref
            PATCH_IF ("%resref%" STRING_COMPARE_CASE "%spell%" = 0) BEGIN 
              WRITE_ASCIIE (base_fx_add + 0x14 + (0x30 * index2)) "%item%" #8 // if self-reference, update
            END // end self-reference check
            PATCH_IF duration >= 0 BEGIN                                  // if custom duration set, update duration
              READ_LONG (base_fx_add + 0x0e + (0x30 * index2)) fx_dur
              PATCH_IF fx_dur > 6 BEGIN                                   // skip instant effects
                WRITE_LONG (base_fx_add + 0x0e + (0x30 * index2)) duration
              END // duration length check
            END // custom duration check
            PATCH_IF probability BEGIN                                    // if custom probability set, scale probabilities
              WRITE_BYTE (base_fx_add + 0x12 + (0x30 * index2)) ((THIS * probability) / 100) 
              WRITE_BYTE (base_fx_add + 0x13 + (0x30 * index2)) ((THIS * probability) / 100) 
            END // custom probability check
          END // end new fx loop
        END // end header match check
      END // end main for loop 
      BUT_ONLY      
            
  END ELSE BEGIN
  
    WARN ~cd_items_casting_spells: file(s) not found or invalid input~
    
  END

END  

/////                                                  \\\\\
///// ALTER_STORE_ITEM                                 \\\\\
/////                                                  \\\\\

// from bg2 fixpack, with no changes made

// while bg2 and iwd2 store formats differ, the item count/offset are in the same place
// and the individual item listings are identical

DEFINE_PATCH_FUNCTION ALTER_STORE_ITEM

  // defines what we're going to check
  INT_VAR expiry           = "-1"
          charge1          = "-1"
          charge2          = "-1"
          charge3          = "-1"
          flags            = "-1"
          flag_identified  = "-1"
          flag_unstealable = "-1"
          flag_stolen      = "-1"
          flag_undroppable = "-1"
          stock            = "-1"
          infinite         = "-1"
          match_expiry     = "-1"
          match_charge1    = "-1"
          match_charge2    = "-1"
          match_charge3    = "-1"
          match_flags      = "-1"
          match_stock      = "-1"
          match_infinite   = "-1"
  STR_VAR item       = "same"
          match_item = "same"

BEGIN

  READ_LONG 0x34 item_off
  READ_LONG 0x38 item_num
  FOR (index = 0 ; index < item_num ; ++index) BEGIN
    SET base = (item_off + (index * 0x1c))
    READ_ASCII (base       ) o_item
    READ_SHORT (base + 0x08) o_expiry
    READ_SHORT (base + 0x0a) o_charge1
    READ_SHORT (base + 0x0c) o_charge2
    READ_SHORT (base + 0x0e) o_charge3
    READ_LONG  (base + 0x10) o_flags
    READ_LONG  (base + 0x14) o_stock
    READ_LONG  (base + 0x18) o_infinite

    PATCH_IF ((("%o_item%" STRING_COMPARE_CASE "%match_item%" = 0) OR
              ("all"      STRING_COMPARE_CASE "%match_item%" = 0)) AND
              ((match_expiry < 0)   OR (match_expiry = o_expiry))    AND
              ((match_charge1 < 0)  OR (match_charge1 = o_charge1))  AND
              ((match_charge2 < 0)  OR (match_charge2 = o_charge2))  AND
              ((match_charge3 < 0)  OR (match_charge3 = o_charge3))  AND
              ((match_flags < 0)    OR (match_flags = o_flags))      AND
              ((match_stock < 0)    OR (match_stock = o_stock))      AND
              ((match_infinite < 0) OR (match_infinite = o_infinite))) BEGIN
      PATCH_IF (expiry >= 0)   BEGIN WRITE_SHORT (base + 0x08) expiry   END
      PATCH_IF (charge1 >= 0)  BEGIN WRITE_SHORT (base + 0x0a) charge1  END
      PATCH_IF (charge2 >= 0)  BEGIN WRITE_SHORT (base + 0x0c) charge2  END
      PATCH_IF (charge3 >= 0)  BEGIN WRITE_SHORT (base + 0x0e) charge3  END
      PATCH_IF (stock >= 0)    BEGIN WRITE_LONG  (base + 0x14) stock    END
      PATCH_IF (infinite >= 0) BEGIN WRITE_LONG  (base + 0x18) infinite END
      PATCH_IF (flags >= 0)   BEGIN
        WRITE_LONG (base + 0x10) flags
      END ELSE BEGIN // only check individual flags if overall value not given
        PATCH_IF (flag_identified = 0)  BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT0) END
        PATCH_IF (flag_identified = 1)  BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT0) END
        PATCH_IF (flag_unstealable = 0) BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT1) END
        PATCH_IF (flag_unstealable = 1) BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT1) END
        PATCH_IF (flag_stolen = 0)      BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT2) END
        PATCH_IF (flag_stolen = 1)      BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT2) END
        PATCH_IF (flag_undroppable = 0) BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT3) END
        PATCH_IF (flag_undroppable = 1) BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT3) END
      END
      PATCH_IF ("%item%" STRING_COMPARE_CASE "same") BEGIN
        WRITE_ASCIIE base ~%item%~ #8
      END
    END
  END

END